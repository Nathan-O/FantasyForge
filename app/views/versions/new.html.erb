<!-- Paper.js -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/paper.js/0.9.25/paper-full.js"></script>

<!-- Local -->
<script type="text/javascript" src="/assets/versions-new.js"></script>

<div class="page-wrap">
   <textbox type="hidden" value="<%= @map.url %>" id="master-url-cont"><%= @map.url %></textbox>
   <header>
      <div class="page-header">
         <h1>Version Creator</h1>
      </div>
   </header>

   <div class="btn-group-vertical" role="group" id="toolbar">
      <h6 class="tool-label"><small>Border & General</small></h6>
      <button type="button" class="btn btn-xs btn-default" id="pencil"><small>Pencil</small></button>
      <button type="button" class="btn btn-xs btn-default" id="brush"><small>Brush</small></button>
      <h6 class="tool-label"><small>Land Mass</small></h6>
      <button type="button" class="btn btn-xs btn-default" id="jagged-coast"><small>Jagged Coast</small></button>
      <button type="button" class="btn btn-xs btn-default" id="smooth-coast"><small>Smooth Coast</small></button>
      <h6 class="tool-label"><small>Terrain</small></h6>
      <button type="button" class="btn btn-xs btn-default" id="river"><small>River</small></button>
      <button type="button" class="btn btn-xs btn-default" id="lake"><small>Lake</small></button>
      <button type="button" class="btn btn-xs btn-default" id="forest"><small>Forest</small></button>
      <button type="button" class="btn btn-xs btn-default" id="mountain"><small>Mountain</small></button>
      <h6 class="tool-label"><small>Man Made</small></h6>
      <button type="button" class="btn btn-xs btn-default" id="road"><small>Road</small></button>
      <button type="button" class="btn btn-xs btn-default" id="capital"><small>Capital Marker</small></button>
      <button type="button" class="btn btn-xs btn-default" id="castle"><small>Castle Marker</small></button>
      <button type="button" class="btn btn-xs btn-default" id="city"><small>City Marker</small></button>
      <hr>
      <button type="button" class="btn btn-xs btn-default" id="undo-btn">Undo</button>
      <button type="button" class="btn btn-xs btn-default" id="map-version-save">Save Version</button>
   </div>


   <div class="col-md-10 col-md-offset-1">
      <div class="row">
         <div class="col-md-4 col-md-offset-4" id="title-div">
            <h1 id="map-title-set"> <%= @map.title %> </h1>
            <input class="form-control input-lg" type="text" id="map-subtitle" placeholder="Version Subtitle">
         </div>
      </div>
      <div id="creator-map-wrap">
         <canvas id="map-version-canvas" resize="true"></canvas>
      </div>
   </div>



<!-- Define inlined PaperScript associate it with canvas -->
<script type="text/paperscript" canvas="map-version-canvas">
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

$(document).ready(function(){
   console.log("Sanity Inline-js");
   // loadMapMaster();
   renderMap();
   $("#pencil").on("click", function(e){
      console.log("Pencil clicked!!");
      toolPencil.activate();
   })

   $("#brush").on("click", function(e){
      console.log("Brush clicked!");
      toolBrush.activate();
   })

   $("#jagged-coast").on("click", function(e){
      console.log("J-Coast clicked!");
      toolJagCoast.activate();
      jagCoastPath = new Path();
      currentPath = jagCoastPath;
   })

   $("#smooth-coast").on("click", function(){
      console.log("S-Coast clicked!");
      toolSmoothCoast.activate();
      smoothCoastPath = new Path();
      currentPath = smoothCoastPath;
   })

   $("#river").on("click", function(e){
      console.log("River clicked!");
      toolRiver.activate();
   })

   $("#lake").on("click", function(e){
      console.log("Lake clicked!");
      lakePath = new Path();
      currentPath = lakePath;
      toolLake.activate();
   })

   $("#mountain").on("click", function(){
      console.log("Mountain clicked!");
      toolMountain.activate();
   })

   $("#forest").on("click", function(){
      console.log("Forest clicked!");
      toolForest.activate();
   });

   $("#road").on("click", function(){
      console.log("Road clicked!");
      toolRoad.activate();
   });

   $("#capital").on("click", function(){
      console.log("Capital clicked!");
      toolCapital.activate();
   });

   $("#castle").on("click", function(){
      console.log("Castle clicked!");
      toolCastle.activate();
   });

   $("#city").on("click", function(){
      console.log("City clicked!");
      toolCity.activate();
   });

   $("#undo-btn").on("click", function(){
      console.log("Undo clicked!");
      pathUndo(currentPath);
   });

   $("#map-version-save").on("click", function(){
      console.log("Save clicked!");
      saveVersion();
   });

});

function renderMap(mapUrl){
   console.log("Can I haz render?");
   var mapUrl = $("#master-url-cont").html();
   var raster = new Raster({
                           source: mapUrl,
                           position: view.center
                           });
   // If you create a Raster using a url, you can use the onLoad
   // handler to do something once it is loaded:
   raster.onLoad = function() {
       console.log('The image has loaded.');
   };
}


function saveVersion(){
   var versionData = {};

   // var mapTitle = $("#map-title").val();
   var mapTitle = $("#map-title-set").text();
   var mapSubtitle = $("#map-subtitle").val();
   console.log(mapTitle);

   var canvas = document.getElementById("map-version-canvas")
   // console.log(canvas);
   var url = canvas.toDataURL("image/png");
   console.log(url);

   versionData.url = url;
   versionData.title = mapTitle;
   versionData.subtitle = mapSubtitle;

   $.ajax({
      type: "POST",
      url: "/versions",
      data: versionData,
      success: function(jsonResponse){
         console.log(jsonResponse);
         if (jsonResponse.status === "redirect") {
            window.location = jsonResponse.to;
         }
      },
      complete: function(xhr,status){
         // window.reload();
         console.log("COMPLETE");
      }
   });

};

////////////////////////////////////////////////////
/* Pencil Tool */

var toolPencil = new Tool();
var pencilPath;

toolPencil.onMouseDown = function(event) {   // GOT RED LINE!!!
   pencilPath = new Path();
   currentPath = pencilPath;
   pencilPath.strokeColor = "red";
};

toolPencil.onMouseDrag = function(event){
   pencilPath.add(event.point);
};

////////////////////////////////////////////////////
/* Brush Tool */

var toolBrush = new Tool();
var brushPath;
toolBrush.onMouseDown = function(event) {   // GOT RED LINE!!!
   brushPath = new Path();
   currentPath = brushPath;
   brushPath.strokeColor = "red";
   brushPath.dashArray = [5, 10];
   brushPath.strokeWidth = 4;
};

toolBrush.onMouseDrag = function(event){
   brushPath.add(event.point);
};

////////////////////////////////////////////////////
/* Jagged Coast Tool */

var toolJagCoast = new Tool();
var jagCoastPath;
var jagCoastPoint;
var dragNum;

// The mouse has to be moved at least Random num pt
// before the next onMouseDrag event is called:
toolJagCoast.minDistance = Math.floor(Math.random() * (25 - 2)) + 2;

toolJagCoast.onMouseDown = function (event){
   jagCoastPoint = new Point();
   dragNum = 0;

   jagCoastPath.strokeColor = "#73683B";
   // jagCoastPath.fillColor = "green";

};

toolJagCoast.onMouseDrag = function(event){
   var vector = event.delta; // difference between the curser and where the curser was last time the event was fired.
   // console.log(vector); // <- returns X Y coord. object.
   dragNum = dragNum + 1;
   // rotate the vector by somewhere between 30 and 95 degrees
   vector.angle += Math.floor(Math.random() * (95 - 30)) + 30;

   if (dragNum % 8 === 0) {
      jagCoastPoint = (event.middlePoint);

      jagCoastPath.add(jagCoastPoint);
      jagCoastPath.add(event.middlePoint + {x: 0,y: 3});
      jagCoastPath.add(event.middlePoint + {x: 3,y: 0});

      jagCoastPath.miterLimit;

   } else if (dragNum % 2 === 0) {
      // conveluted if statments meant only to randomize angle output a bit more.
      if (dragNum % 5 === 0) {
         vector.length = Math.floor(Math.random() * (20 - 5)) + 5;
      } else {
         vector.length = Math.floor(Math.random() * (5 - 2)) + 2;
      };
      jagCoastPoint = (event.middlePoint + vector);

      jagCoastPath.add(jagCoastPoint);
      jagCoastPath.add(event.middlePoint);

   } else if ((dragNum % 2 !== 0) && (dragNum % 3 !== 0)) {
      if (dragNum % 5 === 0) {
         vector.length = Math.floor(Math.random() * (20 - 5)) + 5;
         jagCoastPath.add(event.middlePoint);

      } else {
         vector.length = Math.floor(Math.random() * (5 - 2)) + 2;
      };
      jagCoastPoint = (event.middlePoint - vector);
      jagCoastPath.add(jagCoastPoint);
   };
};

toolJagCoast.onMouseUp = function(event){
   console.log("Hells Yes");
   jagCoastPath.fillColor = {
      gradient: {
         stops: [['#1F4A0C', 0.35], ['#2A7221', 0.75], ['#A57548', 1]],
         radial: true
         },
      origin: jagCoastPath.position,
      destination: jagCoastPath.bounds.rightCenter
   };
};

/////////////////////////////////////////////////////////
/* Smooth Coast Tool */

// Black: #120309
// Orange: #ED3904
// Lightblue: #B0BCFF
// Brown: #A57548
// Green: #2A7221

var toolSmoothCoast = new Tool();
var smoothCoastPath;
var smoothCoastPoint;

toolSmoothCoast.minDistance = Math.floor(Math.random() * (15 - 2)) + 2;

toolSmoothCoast.onMouseDown = function(event){
   smoothCoastPoint = new Point();
   smoothCoastPoint = event.point;

   smoothCoastPath.strokeColor = "#73683B";
   smoothCoastPath.strokeWidth = 2;
   // smoothCoastPath.fillColor = "green";
   smoothCoastPath.add(smoothCoastPoint);
};

toolSmoothCoast.onMouseDrag = function(event){
   var vector = event.delta;
   vector.angle += 45;

   smoothCoastPath.add(event.point + vector);
};

toolSmoothCoast.onMouseUp = function(event){
   console.log("Hells Yes");
   smoothCoastPath.fillColor = {
      gradient: {
         stops: [['#1F4A0C', 0.35], ['#2A7221', 0.75], ['#A57548', 1]],
         radial: true
         },
      origin: smoothCoastPath.position,
      destination: smoothCoastPath.bounds.rightCenter
   };
};

/////////////////////////////////////////////////////////
/* Small Islands Tool */

var toolSmIslands = new Tool();
var smIslandPath = new Path();

/////////////////////////////////////////////////////////
/* River Tool */

var toolRiver = new Tool();
var riverPath;

toolRiver.minDistance = 2;
toolRiver.maxDistance = 15;

toolRiver.onMouseDown = function(event){
   riverPath = new Path();
   currentPath = riverPath;
   riverPath.strokeColor = "#031A6B";
   riverPath.fillColor = "#1822BC";
   riverPath.add(event.point);
};

toolRiver.onMouseDrag = function(event){
   var step = event.delta / 2;
   step.angle += 90;

   var top = event.middlePoint + step;
   var bottom = event.middlePoint - step;

   riverPath.add(top);
   riverPath.insert(0, bottom);
   riverPath.smooth();
};

toolRiver.onMouseUp = function(event){
   riverPath.add(event.point);
   riverPath.closed = true;
   riverPath.smooth();
};

/////////////////////////////////////////////////////////
/* Lake Tool */

var toolLake = new Tool();
var lakePath;

// This function is called whenever the user
// clicks the mouse in the view:
toolLake.onMouseDown = function(event) {
	// Add a segment to the path at the position of the mouse:
   lakePath.strokeColor = '#1822BC';
	lakePath.add(event.point);
   // lakePath.fillColor = "blue";
   lakePath.fillColor = {
      gradient: {
         stops: [['#1822BC', 0.75], ['#4472CA', 1]],
         radial: true
         },
      origin: lakePath.position,
      destination: lakePath.bounds.rightCenter
   };
   lakePath.smooth();
};

/////////////////////////////////////////////////////////
/* Swamp Tool */

var toolSwamp = new Tool();
var swampPath = new Path();

/////////////////////////////////////////////////////////
/* Forest Tool */

var toolForest = new Tool();
var forestPath;
var dragCount;
var forestSize;
var recSize1;
var recSize2;

toolForest.minDistance = 10;
toolForest.onMouseDown = function(event){
   // reset with each click
   dragCount = 0
   forestPath = new Path();
   currentPath = forestPath;
};

toolForest.onMouseDrag = function(event){
   dragCount += 1;
   console.log(dragCount);
   var vector = event.delta/2;
   // randomize sizes to some degree.
   forestSize = Math.floor(Math.random() * (5 - 2)) + 2;
   recSize1 = Math.floor(Math.random() * (12 - 8)) + 8;
   recSize2 = Math.floor(Math.random() * (5 - 3)) + 3;

   var forestPiece = new Shape.Circle(new Point(event.point), forestSize);
   forestPiece.strokeColor = 'black';
   forestPiece.fillColor = "#1F4A0C";

   if (dragCount % 4 === 0) {
      var rectangle = new Rectangle(new Point(event.point + (vector - 3)), new Size(recSize1, recSize2));
      var forestPosOffset = new Shape.Ellipse(rectangle);
      forestPosOffset.strokeColor = "black";
      forestPosOffset.fillColor = "#2A6F32";
   } else if (dragCount % 10 === 0) {
      var forestNegOffset = new Shape.Circle(new Point(event.point - (vector + 3)), forestSize - 1);
      forestNegOffset.strokeColor = "black";
      forestNegOffset.fillColor = "#73683B";
   };
};

/////////////////////////////////////////////////////////
/* Mountain Tool */

var toolMountain = new Tool();

toolMountain.minDistance = Math.floor(Math.random() * (15 - 2)) + 2;

toolMountain.onMouseDrag = function(event){
   var mountSize = Math.floor(Math.random() * (8 - 2)) + 2;

   var mountainTri = new Path.RegularPolygon(event.point, 3, mountSize);
   mountainTri.strokeColor = "black";
   // mountainTri.fillColor = 'brown';
   mountainTri.fillColor = {
      gradient: {
           stops: [['white', 0.02], ['#A57548', 1]]
            },
      origin: mountainTri.position,
      destination: (mountainTri.position - (3, - 0.5))
   };
};

/////////////////////////////////////////////////////////
/* Road Tool */

var toolRoad = new Tool();
var roadPath;

toolRoad.minDistance = 2;
toolRoad.maxDistance = 7;

toolRoad.onMouseDown = function(event){
   roadPath = new Path();
   currentPath = roadPath;
   roadPath.strokeColor = "#583E23";
   roadPath.fillColor = "#73683B";
   roadPath.add(event.point);
};

toolRoad.onMouseDrag = function(event){
   var step = event.delta / 2;
   step.angle += 90;

   var top = event.middlePoint + step;
   var bottom = event.middlePoint - step;

   roadPath.add(top);
   roadPath.insert(0, bottom);
   roadPath.smooth();
};

toolRoad.onMouseUp = function(event){
   roadPath.add(event.point);
   roadPath.closed = true;
   roadPath.smooth();
};

/////////////////////////////////////////////////////////
/* Capital Tool */

var toolCapital = new Tool();

toolCapital.onMouseDown = function(event){
   var center = new Point(event.point);
   var points = 7;
   var radius1 = 4;
   var radius2 = 10;
   var capCityMarker = new Path.Star(center, points, radius1, radius2);
   currentPath = capCityMarker;
   capCityMarker.strokeColor = "black";
   capCityMarker.strokeWidth = 2;
   capCityMarker.fillColor = 'yellow';
};

/////////////////////////////////////////////////////////
/* Castle Tool */

var toolCastle = new Tool();

toolCastle.onMouseDown = function(event){
   var center = new Point(event.point);
   var points = 4;
   var radius1 = 4;
   var radius2 = 10;
   var castleMarker = new Path.Star(center, points, radius1, radius2);
   currentPath = castleMarker;
   castleMarker.strokeColor = "black";
   castleMarker.strokeWidth = 2;
   castleMarker.fillColor = 'grey';
};

/////////////////////////////////////////////////////////
/* City Tool */

var toolCity = new Tool();

toolCity.onMouseDown = function(event){
   var cityMarker = new Shape.Circle(new Point(event.point), 5);
   currentPath = cityMarker;
   cityMarker.strokeColor = "black";
   cityMarker.strokeWidth = 3;
   cityMarker.fillColor = "grey";
};


/////////////////////////////////////////////////////////
/* Undo Tool */

var currentPath;

function pathUndo(path){
   path.removeSegments();
};

/////////////////////////////////////////////////////////
/* End Tool */
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
</script>
